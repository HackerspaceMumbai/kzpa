package com.example.hack4change;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.json.JSONObject;

import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.pm.Signature;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.BitmapDrawable;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.support.v4.app.Fragment;
import android.util.Base64;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.facebook.FacebookRequestError;
import com.facebook.HttpMethod;
import com.facebook.Request;
import com.facebook.RequestAsyncTask;
import com.facebook.Response;
import com.facebook.Session;
import com.facebook.SessionState;
import com.facebook.UiLifecycleHelper;
import com.facebook.model.GraphUser;
import com.facebook.widget.LoginButton;
import com.facebook.widget.ProfilePictureView;

public class FacebookFragment extends Fragment {

	private static final String TAG = "FacebookFragment";
	private UiLifecycleHelper uiHelper;

	// code
	private Button shareButton;
	private Button cameraButton;
	private static final List<String> PERMISSIONS = Arrays
			.asList("publish_actions", "publish_stream", "photo_upload",
					"manage_pages");
	private boolean pendingPublishReauthorization = false;
	Uri initialURI;
	ImageView mImageView;
	// directory name to store captured images and videos
	private Bitmap mBitmap;

	// code ends

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setRetainInstance(true);
		uiHelper = new UiLifecycleHelper(getActivity(), callback);
		uiHelper.onCreate(savedInstanceState);
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		View view = inflater.inflate(R.layout.fbfeed, container, false);
		try {
			PackageInfo info = getActivity().getPackageManager()
					.getPackageInfo("org.iste.vesit",
							PackageManager.GET_SIGNATURES);
			for (Signature signature : info.signatures) {
				MessageDigest md = MessageDigest.getInstance("SHA");
				md.update(signature.toByteArray());
				Log.e("MY KEY HASH:",
						Base64.encodeToString(md.digest(), Base64.DEFAULT));
			}
		} catch (NameNotFoundException e) {

		} catch (NoSuchAlgorithmException e) {

		}
		LoginButton authButton = (LoginButton) view
				.findViewById(R.id.authButton);
		authButton.setFragment(this);
		// authButton.setPublishPermissions(Arrays.asList("publish_actions",
		// "publish_stream"));
		authButton.setReadPermissions(Arrays
				.asList("read_stream", "user_groups", "photo_upload",
						"friends_groups", "manage_pages"));
		// Session session = Session.getActiveSession();
		// if (session == null ) {
		// session = new
		// Session.Builder(getActivity()).setApplicationId(getString(R.string.APP_ID)).build();
		// Session.setActiveSession(session);
		// }
		return view;
	}

	private Session.StatusCallback callback = new Session.StatusCallback() {
		@Override
		public void call(Session session, SessionState state,
				Exception exception) {
			onSessionStateChange(session, state, exception);
		}
	};

	private void onSessionStateChange(Session session, SessionState state,
			Exception exception) {
		if (state.isOpened()) {
			Log.i(TAG, "Logged in");
			shareButton.setVisibility(View.VISIBLE);
			cameraButton.setVisibility(View.VISIBLE);

		} else if (state.isClosed()) {
			Log.i(TAG, "Logged out");
			cameraButton.setVisibility(View.INVISIBLE);
			shareButton.setVisibility(View.INVISIBLE);

		}
	}

	@Override
	public void onResume() {
		super.onResume();
		Session session = Session.getActiveSession();
		if (session != null && (session.isOpened() || session.isClosed())) {
			onSessionStateChange(session, session.getState(), null);
		}

		uiHelper.onResume();
	}

	@Override
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		uiHelper.onActivityResult(requestCode, resultCode, data);
		if (requestCode == 1888) {
            String _path = Environment.getExternalStorageDirectory()
            + File.separator + "ISTEVESIT.jpg";
            mBitmap = BitmapFactory.decodeFile(_path);
            if (mBitmap == null) {
                Toast.makeText(getActivity(), "Photo Corrupt! Try Again", Toast.LENGTH_LONG).show();
            } else {
            	//Toast.makeText(getActivity(), "right text", Toast.LENGTH_SHORT).show();
            	//mBitmap.compress(Bitmap.CompressFormat.PNG, 100, mImageView);
    			mImageView.setImageBitmap(mBitmap);

	        }
        
			publishStory(mImageView);
		}

	}

	@Override
	public void onPause() {
		super.onPause();
		uiHelper.onPause();
	}

	@Override
	public void onDestroy() {
		super.onDestroy();
		uiHelper.onDestroy();
	}

	@Override
	public void onSaveInstanceState(Bundle outState) {
		super.onSaveInstanceState(outState);
		uiHelper.onSaveInstanceState(outState);
	}

	// code
	@Override
	public void onViewCreated(View view, Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onViewCreated(view, savedInstanceState);
		// Log.d("A", "1");
		Session.openActiveSession(getActivity(), true,
				new Session.StatusCallback() {

					// callback when session changes state
					@Override
					public void call(Session session, SessionState state,
							Exception exception) {
						if (session.isOpened()) {

							// make request to the /me API
							Request.newMeRequest(session,
									new Request.GraphUserCallback() {

										// callback after Graph API response
										// with user object
										@Override
										public void onCompleted(GraphUser user,
												Response response) {
											if (user != null
													&& getActivity() != null
													&& isVisible()) {
												ProfilePictureView profilePictureView = (ProfilePictureView) getActivity()
														.findViewById(
																R.id.profilePicture);
												profilePictureView
														.setProfileId(user
																.getId());
												TextView welcome = (TextView) getActivity()
														.findViewById(
																R.id.fbwelcome);
												welcome.setText("Hello, "
														+ user.getFirstName()
														+ "!");
											}
										}
									}).executeAsync();
						}
					}
				});
		mImageView = (ImageView) getActivity().findViewById(R.id.cameraPhoto);

		cameraButton = (Button) view.findViewById(R.id.cameraButton);
		cameraButton.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				String _path = Environment.getExternalStorageDirectory()
						+ File.separator + "ISTEVESIT.jpg";
				File file = new File(_path);
				Uri outputFileUri = Uri.fromFile(file);
				Intent intent = new Intent(
						android.provider.MediaStore.ACTION_IMAGE_CAPTURE);
				intent.putExtra(MediaStore.EXTRA_OUTPUT, outputFileUri);
				startActivityForResult(intent, 1888);

			}
		});

		shareButton = (Button) view.findViewById(R.id.shareButton);
		shareButton.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				publishStory();
			}
		});
	}

	private void publishStory(ImageView bmpImageCamera) {
		// TODO Auto-generated method stub
		Session session = Session.getActiveSession();
		if (session != null) {

			// Check for publish permissions
			List<String> permissions = session.getPermissions();
			if (!isSubsetOf(PERMISSIONS, permissions)) {
				pendingPublishReauthorization = true;
				Session.NewPermissionsRequest newPermissionsRequest = new Session.NewPermissionsRequest(
						this, PERMISSIONS);
				session.requestNewPublishPermissions(newPermissionsRequest);
				return;
			}

			BitmapDrawable drawable = (BitmapDrawable) bmpImageCamera
					.getDrawable();
			Bitmap bitmap = drawable.getBitmap();
			ByteArrayOutputStream stream2 = new ByteArrayOutputStream();
			bitmap.compress(Bitmap.CompressFormat.JPEG, 50, stream2);
			byte[] imageInByte = stream2.toByteArray();
			Bundle postParams = new Bundle();
			EditText fbstatus = (EditText) getActivity().findViewById(
					R.id.fbstatus);

			postParams.putByteArray("picture", imageInByte);
			postParams.putString("message", fbstatus.getText().toString());
			// postParams.putString("caption", "and caption too :D");
			/*
			 * "Build great social apps and get more installs.");
			 * postParams.putString("description",
			 * "The Facebook SDK for Android makes it easier and faster to develop Facebook integrated Android apps."
			 * ); postParams.putString("link",
			 * "https://developers.facebook.com/android");
			 * postParams.putString("picture",
			 * "https://raw.github.com/fbsamples/ios-3.x-howtos/master/Images/iossdk_logo.png"
			 * );
			 */
			Request.Callback callback = new Request.Callback() {
				public void onCompleted(Response response) {
					String postId = null;
					try {
						JSONObject graphResponse = response.getGraphObject()
								.getInnerJSONObject();

						postId = graphResponse.getString("id");
					} catch (Exception e) {
						Toast.makeText(getActivity(), "Log in again",
								Toast.LENGTH_SHORT).show();
						Log.i("JSON error", e.getMessage());
					}

					FacebookRequestError error = response.getError();
					if (error != null) {
						Toast.makeText(getActivity().getApplicationContext(),
								error.getErrorMessage(), Toast.LENGTH_SHORT)
								.show();
					} else {
						Toast.makeText(getActivity().getApplicationContext(),
								"Image successfully posted", Toast.LENGTH_LONG).show();
					}
				}
			};
			// 1406291946260926
			Request request = new Request(session, "1443922975825622/photos",
					postParams, HttpMethod.POST, callback);

			RequestAsyncTask task = new RequestAsyncTask(request);
			task.execute();
		}
	}

	private void publishStory() {
		Session session = Session.getActiveSession();

		if (session != null) {

			// Check for publish permissions
			List<String> permissions = session.getPermissions();
			if (!isSubsetOf(PERMISSIONS, permissions)) {
				pendingPublishReauthorization = true;
				Session.NewPermissionsRequest newPermissionsRequest = new Session.NewPermissionsRequest(
						this, PERMISSIONS);
				session.requestNewPublishPermissions(newPermissionsRequest);
				return;
			}

			EditText fbstatus = (EditText) getActivity().findViewById(
					R.id.fbstatus);
			if (fbstatus.getText().toString().equals("")) {
				Toast.makeText(getActivity(), "Enter a message first!",
						Toast.LENGTH_SHORT).show();

			} else {
				Bundle postParams = new Bundle();
				postParams.putString("message", fbstatus.getText().toString());
				/*
				 * postParams.putString("name", "Facebook SDK for Android");
				 * postParams.putString("caption",
				 * "Build great social apps and get more installs.");
				 * postParams.putString("description",
				 * "The Facebook SDK for Android makes it easier and faster to develop Facebook integrated Android apps."
				 * ); postParams.putString("link",
				 * "https://developers.facebook.com/android");
				 * postParams.putString("picture",
				 * "https://raw.github.com/fbsamples/ios-3.x-howtos/master/Images/iossdk_logo.png"
				 * );
				 */
				Request.Callback callback = new Request.Callback() {

					public void onCompleted(Response response) {
						String postId = null;
						try {
							JSONObject graphResponse = response
									.getGraphObject().getInnerJSONObject();

							postId = graphResponse.getString("id");
						} catch (Exception e) {
							Toast.makeText(getActivity(), "Log in again",
									Toast.LENGTH_SHORT).show();
							Log.i("JSON error", e.getMessage());
						}
						FacebookRequestError error = response.getError();
						if (error != null) {
							Toast.makeText(
									getActivity().getApplicationContext(),
									error.getErrorMessage(), Toast.LENGTH_SHORT)
									.show();
						} else {
							Toast.makeText(
									getActivity().getApplicationContext(),
									"Message successfully posted", Toast.LENGTH_LONG).show();
						}
					}
				};

				Request request = new Request(session, "1443922975825622/feed",
						postParams, HttpMethod.POST, callback);

				RequestAsyncTask task = new RequestAsyncTask(request);
				task.execute();
			}
		}
	}

	private boolean isSubsetOf(Collection<String> subset,
			Collection<String> superset) {
		for (String string : subset) {
			if (!superset.contains(string)) {
				return false;
			}
		}
		return true;
	}

}
